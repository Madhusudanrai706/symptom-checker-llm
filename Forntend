import React, { useMemo, useState } from "react";
import { motion } from "framer-motion";
import { Stethoscope, AlertTriangle, Loader2, Sparkles, RefreshCcw } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";

// ---------------------------------------------
// Types matching the backend API contract
// ---------------------------------------------
export type DiagnoseResponse = {
  diagnoses: Array<{
    name: string;
    confidence?: number; // 0..1
    explanation?: string;
  }>;
  next_steps: string[];
  red_flags?: string[];
  model_info?: { model_id?: string; latency_ms?: number };
};

// Small helper for a confidence bar
function ConfidenceBar({ value = 0 }: { value?: number }) {
  const pct = Math.max(0, Math.min(100, Math.round((value || 0) * 100)));
  return (
    <div className="w-full h-2 rounded-full bg-gray-200 dark:bg-gray-800 overflow-hidden">
      <div
        className="h-full rounded-full bg-gradient-to-r from-blue-500 to-cyan-400"
        style={{ width: `${pct}%` }}
        aria-label={`Confidence ${pct}%`}
      />
    </div>
  );
}

export default function SymptomCheckerApp() {
  const [symptoms, setSymptoms] = useState("");
  const [age, setAge] = useState<string>("");
  const [sex, setSex] = useState<string>("");
  const [duration, setDuration] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<DiagnoseResponse | null>(null);
  const [error, setError] = useState<string | null>(null);

  const canSubmit = useMemo(() => symptoms.trim().length > 5, [symptoms]);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError(null);
    setResult(null);
    if (!canSubmit) return;

    setLoading(true);
    try {
      const res = await fetch("/api/diagnose", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ symptoms, age, sex, duration }),
      });

      if (!res.ok) {
        const txt = await res.text();
        throw new Error(txt || `Request failed (${res.status})`);
      }

      const data = (await res.json()) as DiagnoseResponse;
      setResult(data);
    } catch (err: any) {
      setError(err?.message || "Something went wrong");
    } finally {
      setLoading(false);
    }
  }

  function fillDemo() {
    setSymptoms(
      "Fever (101Â°F) for 3 days, dry cough, sore throat, fatigue, mild headache. No shortness of breath."
    );
    setAge("29");
    setSex("female");
    setDuration("3 days");
  }

  function clearAll() {
    setSymptoms("");
    setAge("");
    setSex("");
    setDuration("");
    setResult(null);
    setError(null);
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-white to-slate-50 dark:from-slate-900 dark:to-slate-950 text-slate-900 dark:text-slate-100">
      <div className="max-w-5xl mx-auto px-4 py-10">
        {/* Header */}
        <div className="flex items-center gap-3 mb-8">
          <div className="p-3 rounded-2xl bg-blue-100 dark:bg-blue-900/40">
            <Stethoscope className="w-7 h-7" />
          </div>
          <div>
            <h1 className="text-2xl sm:text-3xl font-semibold tracking-tight">Symptom Checker</h1>
            <p className="text-sm text-slate-500 dark:text-slate-400">
              Send your symptoms to an LLM-powered backend and get possible differentials and next steps.
            </p>
          </div>
        </div>

        {/* Form + Results Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card className="rounded-2xl shadow-sm">
            <CardHeader>
              <CardTitle>Describe your symptoms</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="symptoms">Symptoms *</Label>
                  <Textarea
                    id="symptoms"
                    value={symptoms}
                    onChange={(e) => setSymptoms(e.target.value)}
                    placeholder="e.g., Fever for 2 days, runny nose, sore throat, mild cough, no chest pain"
                    className="min-h-[120px] resize-y"
                    required
                  />
                  <p className="text-xs text-slate-500">Avoid personal identifiers. This is for demo purposes only and is not medical advice.</p>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="age">Age</Label>
                    <Input id="age" type="number" min={0} value={age} onChange={(e) => setAge(e.target.value)} placeholder="30" />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="sex">Sex</Label>
                    <select
                      id="sex"
                      value={sex}
                      onChange={(e) => setSex(e.target.value)}
                      className="w-full rounded-md border border-slate-300 bg-transparent px-3 py-2 text-sm dark:border-slate-700"
                    >
                      <option value="">Prefer not to say</option>
                      <option value="female">Female</option>
                      <option value="male">Male</option>
                      <option value="other">Other</option>
                    </select>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="duration">Duration</Label>
                  <Input id="duration" value={duration} onChange={(e) => setDuration(e.target.value)} placeholder="e.g., 3 days" />
                </div>

                {error && (
                  <div className="text-sm p-3 rounded-md bg-red-50 dark:bg-red-950 text-red-700 dark:text-red-300 border border-red-200 dark:border-red-900">
                    {error}
                  </div>
                )}

                <div className="flex flex-wrap gap-3 pt-2">
                  <Button type="submit" disabled={!canSubmit || loading} className="rounded-2xl px-4">
                    {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}
                    {loading ? "Analyzing..." : "Get assessment"}
                  </Button>
                  <Button type="button" variant="secondary" onClick={fillDemo} className="rounded-2xl">
                    Use demo text
                  </Button>
                  <Button type="button" variant="ghost" onClick={clearAll} className="rounded-2xl">
                    <RefreshCcw className="mr-2 h-4 w-4" /> Reset
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>

          <Card className="rounded-2xl shadow-sm">
            <CardHeader>
              <CardTitle>LLM assessment</CardTitle>
            </CardHeader>
            <CardContent>
              {!result && !loading && (
                <div className="text-slate-500 text-sm">
                  Submit the form to see differential diagnoses and recommended next steps here.
                </div>
              )}

              {loading && (
                <div className="flex items-center gap-3 text-slate-500 text-sm">
                  <Loader2 className="h-4 w-4 animate-spin" /> Waiting for the model...
                </div>
              )}

              {result && (
                <div className="space-y-6">
                  {/* Red flags */}
                  {result.red_flags && result.red_flags.length > 0 && (
                    <div className="rounded-xl border border-amber-200 dark:border-amber-900 bg-amber-50/60 dark:bg-amber-950/40 p-4">
                      <div className="flex items-center gap-2 mb-2 text-amber-800 dark:text-amber-200">
                        <AlertTriangle className="h-4 w-4" />
                        <span className="font-medium">Potential red flags</span>
                      </div>
                      <ul className="list-disc pl-5 text-sm space-y-1">
                        {result.red_flags.map((r, i) => (
                          <li key={i}>{r}</li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {/* Diagnoses */}
                  <div className="space-y-3">
                    <h3 className="text-base font-semibold">Possible diagnoses</h3>
                    <div className="space-y-3">
                      {result.diagnoses.map((d, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, y: 8 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.2, delay: i * 0.04 }}
                          className="rounded-xl border p-4 bg-white/60 dark:bg-slate-900/40 border-slate-200 dark:border-slate-800"
                        >
                          <div className="flex items-center justify-between gap-3">
                            <div className="flex items-center gap-2">
                              <Badge variant="outline" className="rounded-xl">
                                #{i + 1}
                              </Badge>
                              <div className="font-medium">{d.name}</div>
                            </div>
                            {typeof d.confidence === "number" && (
                              <div className="text-xs text-slate-500 w-24 text-right">{Math.round(d.confidence * 100)}% likely</div>
                            )}
                          </div>
                          {typeof d.confidence === "number" && (
                            <div className="mt-2"><ConfidenceBar value={d.confidence} /></div>
                          )}
                          {d.explanation && (
                            <p className="mt-2 text-sm text-slate-600 dark:text-slate-400">{d.explanation}</p>
                          )}
                        </motion.div>
                      ))}
                    </div>
                  </div>

                  {/* Next steps */}
                  <div className="space-y-2">
                    <h3 className="text-base font-semibold">Recommended next steps</h3>
                    <ol className="list-decimal pl-5 text-sm space-y-1">
                      {result.next_steps.map((s, i) => (
                        <li key={i}>{s}</li>
                      ))}
                    </ol>
                  </div>

                  {/* Model info */}
                  {result.model_info && (
                    <div className="text-xs text-slate-500">
                      Powered by {result.model_info.model_id || "model"}
                      {typeof result.model_info.latency_ms === "number" && ` â¢ ${result.model_info.latency_ms} ms`}
                    </div>
                  )}

                  {/* Disclaimer */}
                  <p className="text-[11px] leading-relaxed text-slate-500 mt-2">
                    This tool provides AI-generated suggestions and is not a substitute for professional medical advice. If you experience severe or worsening symptoms, seek urgent care.
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

